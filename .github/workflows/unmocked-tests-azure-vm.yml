name: Azure VM Test

on:
  workflow_dispatch:

env:
  RESOURCE_GROUP: CPEN321RSRCGROUP
  LOCATION: eastus
  VM_NAME: biteswipe-test-vm-${{ github.run_number }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Verify Azure Connection
      run: |
        echo "Verifying Azure connection..."
        if ! az account show &> /dev/null; then
          echo "::error::Azure login failed - could not verify account"
          exit 1
        fi
        echo "Azure connection verified successfully"
        az account show --query name -o tsv

    - name: Create Azure VM for Testing
      id: create_vm
      run: |
        # Check if resource group exists, create if not
        if ! az group show --name ${{ env.RESOURCE_GROUP }} &> /dev/null; then
          echo "Creating resource group ${{ env.RESOURCE_GROUP }}..."
          az group create \
            --name ${{ env.RESOURCE_GROUP }} \
            --location ${{ env.LOCATION }}
        else
          echo "Resource group ${{ env.RESOURCE_GROUP }} already exists"
        fi
        
        # Create SSH key directory if it doesn't exist
        mkdir -p ~/.ssh
        
        # Create SSH key file from secret
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa.pub
        
        # Create VM with unique name based on run number
        echo "Creating Azure VM for testing: ${{ env.VM_NAME }}"
        az vm create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.VM_NAME }} \
          --image Ubuntu2204 \
          --admin-username adminuser \
          --ssh-key-values ~/.ssh/id_rsa.pub \
          --public-ip-sku Standard \
          --size Standard_B2s \
          --tags vm-name=${{ env.VM_NAME }}
        
        # Get the public IP of the VM
        VM_IP=$(az vm show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.VM_NAME }} \
          --show-details \
          --query publicIps -o tsv)
        
        echo "VM_IP=$VM_IP" >> $GITHUB_ENV
        echo "Azure VM created with IP: $VM_IP"

    - name: Cleanup Azure VM
      if: always()
      run: |
        echo "Cleaning up Azure VM..."
        
        # Get a list of all resources associated with the VM
        echo "Listing resources to clean up..."
        RESOURCES=$(az resource list --tag "vm-name=${{ env.VM_NAME }}" --query "[].id" -o tsv)
        
        # Delete the VM with --force-deletion to clean up all resources
        echo "Deleting VM with force-deletion..."
        az vm delete \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.VM_NAME }} \
          --yes \
          --force-deletion all
        
        echo "Azure VM cleanup completed"
