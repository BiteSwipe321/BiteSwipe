name: Run Tests and Update PR with Coverage

on:
  pull_request:
    branches:
      - main

# Define permissions needed for GitHub API operations
permissions:
  contents: read
  pull-requests: write

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # Install dependencies
      - name: Install dependencies
        run: cd backend && npm install

      # Run tests and generate coverage
      - name: Run tests with coverage
        run: |
          cd backend && npm run test:coverage -- --coverageReporters="json-summary" "text" --no-cache
        env:
          CI: true

      # Generate coverage table and save to file
      - name: Generate coverage table
        id: coverage_table
        working-directory: ./backend
        run: |
          # Create a formatted coverage table and save to a file
          node -e "
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            
            // Create summary table header
            let summaryTable = '| Metric | Coverage | Covered/Total |\\n|--------|----------|---------------|';
            
            // Add rows for each metric in a specific order to ensure consistent output
            const metrics = ['lines', 'statements', 'functions', 'branches', 'branchesTrue'];
            for (const key of metrics) {
              if (summary.total[key]) {
                const value = summary.total[key];
                summaryTable += '\\n| ' + key + ' | ' + value.pct + '% | ' + value.covered + '/' + value.total + ' |';
              }
            }
            
            // Create detailed table with file-level coverage
            let detailedTable = '\\n\\n### Detailed Coverage Report\\n\\n```\\n';
            
            // Capture the text output from the coverage report
            try {
              const textReport = fs.readFileSync('./coverage/text-summary.txt', 'utf8');
              detailedTable += textReport;
            } catch (e) {
              // If text report doesn't exist, create our own detailed table
              detailedTable += '---------------------------|---------|----------|---------|---------|----------------------\\n';
              detailedTable += 'File                       | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s    \\n';
              detailedTable += '---------------------------|---------|----------|---------|---------|----------------------\\n';
              
              // Add All files row
              const total = summary.total;
              detailedTable += 'All files                  | ' + 
                total.statements.pct.toFixed(2).padStart(6) + ' | ' + 
                total.branches.pct.toFixed(2).padStart(8) + ' | ' + 
                total.functions.pct.toFixed(2).padStart(7) + ' | ' + 
                total.lines.pct.toFixed(2).padStart(7) + ' | ' + 
                '                      \\n';
              
              // Add rows for each file
              for (const [filePath, coverage] of Object.entries(summary)) {
                if (filePath === 'total') continue;
                
                detailedTable += filePath.padEnd(28) + '| ' + 
                  coverage.statements.pct.toFixed(2).padStart(6) + ' | ' + 
                  coverage.branches.pct.toFixed(2).padStart(8) + ' | ' + 
                  coverage.functions.pct.toFixed(2).padStart(7) + ' | ' + 
                  coverage.lines.pct.toFixed(2).padStart(7) + ' | ' + 
                  '                      \\n';
              }
              
              detailedTable += '---------------------------|---------|----------|---------|---------|----------------------\\n';
            }
            
            detailedTable += '```';
            
            // Combine tables
            const fullTable = summaryTable + detailedTable;
            
            // Write to file
            fs.writeFileSync('coverage_table.txt', fullTable);
            
            // Print the table to the GitHub Actions log
            console.log('\n\n--- Coverage Summary ---');
            console.log(summaryTable.replace(/\\n/g, '\n'));
            console.log('\n\n--- Detailed Coverage Report ---');
            console.log(detailedTable.replace(/\\n/g, '\n'));
            console.log('------------------------\n');
            
            // Use the new GitHub Actions environment file approach
            const envFile = process.env.GITHUB_OUTPUT;
            fs.appendFileSync(envFile, 'table_path=coverage_table.txt\\n');
          "

      # Update PR description with coverage table
      - name: Update PR description with coverage
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the coverage table from file
            const tablePath = path.join(process.env.GITHUB_WORKSPACE, 'backend', 'coverage_table.txt');
            const table = fs.readFileSync(tablePath, 'utf8');
            
            const pr = context.payload.pull_request;
            if (pr) {
              const body = pr.body || '';
              
              // Check if there's already a coverage section and remove it
              let updatedBody = body;
              const coverageHeaderIndex = updatedBody.indexOf('### Test Coverage');
              if (coverageHeaderIndex !== -1) {
                // Find the next section header or use the end of the string
                const nextHeaderIndex = updatedBody.indexOf('###', coverageHeaderIndex + 1);
                if (nextHeaderIndex !== -1) {
                  updatedBody = updatedBody.substring(0, coverageHeaderIndex) + updatedBody.substring(nextHeaderIndex);
                } else {
                  updatedBody = updatedBody.substring(0, coverageHeaderIndex);
                }
              }
              
              // Add the updated coverage section
              updatedBody = `${updatedBody.trim()}\n\n### Test Coverage\n${table}`;
              
              await github.rest.pulls.update({
                ...context.repo,
                pull_number: pr.number,
                body: updatedBody
              });
            }

      # Comment on PR if tests fail
      - name: Comment on PR if tests fail
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            if (pr) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: pr.number,
                body: '‚ùå Tests failed! Please fix the failing tests before merging this PR.'
              });
            }

      # Fail if tests fail
      - name: Fail if tests fail
        if: failure()
        run: exit 1
