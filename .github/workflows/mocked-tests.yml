name: Mocked Tests

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/mocked-tests.yml'

jobs:
  run-mocked-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Firebase Credentials
        working-directory: ${{ github.workspace }}
        run: |
          # Create directory if it doesn't exist
          mkdir -p backend

          # Try to download using Azure CLI with key authentication
          if az storage blob download \
            --account-name productionstorageaccoun2 \
            --container-name production-container \
            --name biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json \
            --file backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json \
            --auth-mode key 2>/dev/null; then
            # Verify the file exists and is not empty
            if [ -s backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json ]; then
              echo "Download successful and file is valid!"
              chmod 600 backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json
            else
              echo "Downloaded file is empty or invalid"
              rm -f backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json
              exit 1
            fi
          else
            echo "Failed to download Firebase credentials"
            exit 1
          fi

      # Setup test environment
      - name: Setup test environment
        run: |
          cd backend
          # Create .env file for tests
          echo "PORT=3000" > .env
          echo "DB_URI=mongodb://mock:27017/biteswipe_test" >> .env
          echo "NODE_ENV=test" >> .env
          echo "TEST_TYPE=mocked" >> .env
          echo "GOOGLE_MAPS_API_KEY=mock_key" >> .env
          echo "FIREBASE_CREDENTIALS_JSON_PATHNAME=./backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json" >> .env

      - name: Run mocked tests
        run: |
          cd backend
          echo "Running mocked tests..."
          npm run test:coverage:mocked -- --coverageReporters="json-summary" "text" --no-cache --forceExit --maxWorkers=2
          
          # Save test results for reporting
          mkdir -p test-results
          cp coverage/coverage-summary.json test-results/
          
          # Display test summary in readable format
          echo "\n===== Test Coverage Summary ====="
          echo "Statement coverage: $(cat coverage/coverage-summary.json | jq -r '.total.statements.pct')%"
          echo "Branch coverage:    $(cat coverage/coverage-summary.json | jq -r '.total.branches.pct')%"
          echo "Function coverage:  $(cat coverage/coverage-summary.json | jq -r '.total.functions.pct')%"
          echo "Line coverage:      $(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')%"
          
          echo "\n===== Files with Less Than 80% Coverage ====="
          jq -r 'to_entries | .[] | select(.key != "total") | select(.value.lines.pct < 80) | "\(.key):\n  Lines: \(.value.lines.pct)%\n  Statements: \(.value.statements.pct)%\n  Functions: \(.value.functions.pct)%\n  Branches: \(.value.branches.pct)%"' coverage/coverage-summary.json
