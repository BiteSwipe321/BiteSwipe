name: "Unmocked Tests"

on:
  pull_request:
    branches: [main, develop, master]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  run-unmocked-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Set a timeout for the entire job

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get PR Number
        id: pr_number
        run: echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Setup SSH Keys
        run: |
          mkdir -p ~/.ssh/to_azure
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/to_azure/CPEN321.pem
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/to_azure/CPEN321.pub
          chmod 600 ~/.ssh/to_azure/CPEN321.pem
          chmod 644 ~/.ssh/to_azure/CPEN321.pub
          ls -la ~/.ssh/

      - name: Create .env File
        working-directory: ${{ github.workspace }}
        run: |
          echo "PORT=3000" > backend/.env
          echo "DB_URI=mongodb://mongo:27017/biteswipe" >> backend/.env
          echo "NODE_ENV=test" >> backend/.env
          echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> backend/.env
          echo "GOOGLE_WEB_CLIENT_ID=${{ secrets.GOOGLE_WEB_CLIENT_ID }}" >> backend/.env
          echo "FIREBASE_CREDENTIALS_JSON_PATHNAME=/app/backend/biteswipe-452501-firebase-adminsdk-fbsvc-f7b58ac1e2.json" >> backend/.env

      - name: Deploy New Infrastructure
        timeout-minutes: 12 # Set a 12-minute timeout for tests
        id: deploy
        run: |
          cd backend/scripts
          chmod +x import_resource_group.sh
          echo "::group::Deploying infrastructure"
          python3 deploy_infra.py --prefix pr${{ env.PR_NUMBER}} --run-mode test
          DEPLOY_EXIT_CODE=$?
          echo "::endgroup::"
          echo "deploy_status=$DEPLOY_EXIT_CODE" >> $GITHUB_OUTPUT

          if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
            echo "::error::Infrastructure deployment failed with exit code $DEPLOY_EXIT_CODE"
            echo "::group::Terraform logs (last 50 lines)"
            cd ../terraform
            if [ -f terraform.log ]; then
              echo "Last 50 lines of terraform.log:"
              tail -n 50 terraform.log
              
              # Check for specific error patterns in logs
              if grep -q "Docker Compose\|SSH connection" terraform.log; then
                echo "::error::Detected service deployment failures in logs"
              fi
              
              if grep -q "Server IP found\|Successfully retrieved server IP" terraform.log; then
                echo "::warning::Partial deployment detected: VM created but services failed to start"
              fi
            else
              echo "No terraform.log file found"
            fi
            echo "::endgroup::"
            exit $DEPLOY_EXIT_CODE
          else
            echo "âœ… Infrastructure deployment completed successfully"
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Download Test Results
        run: |
          # Get VM IP from Terraform output
          cd backend/terraform
          VM_IP=$(terraform output -raw vm_public_ip)
          echo "VM IP: $VM_IP"

          # Create directory for test results
          mkdir -p test-results

          # Download coverage reports from VM
          echo "Downloading test results from VM..."
          scp -o StrictHostKeyChecking=no -i ~/.ssh/to_azure/CPEN321.pem -r adminuser@${VM_IP}:/app/backend/coverage/* test-results/

          # Check if download was successful
          if [ $? -eq 0 ]; then
            echo "Test results downloaded successfully"
            ls -la test-results/
          else
            echo "Failed to download test results"
            exit 1
          fi
        continue-on-error: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-report
          path: test-results
          retention-days: 14
        continue-on-error: true

      - name: Destroy Infrastructure
        if: always()
        run: |
          cd backend/scripts
          python3 deploy_infra.py --prefix pr${{ env.PR_NUMBER}} --destroy
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
