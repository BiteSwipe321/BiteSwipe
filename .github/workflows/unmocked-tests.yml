name: Unmocked Tests

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/unmocked-tests.yml'

jobs:
  run-unmocked-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Azure MongoDB Container
        run: |
          # Create resource group for PR
          PR_RG="pr${{ github.event.pull_request.number }}-mongodb-rg"
          az group create --name $PR_RG --location westus2

          # Deploy MongoDB container instance with retries
          echo "Deploying MongoDB container..."
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts to deploy MongoDB container..."
            
            if az container create \
              --resource-group $PR_RG \
              --name mongodb \
              --image mongo:latest \
              --ports 27017 \
              --ip-address Public \
              --os-type Linux \
              --cpu 1 \
              --memory 1.5 \
              --dns-name-label mongodb-${{ github.event.pull_request.number }}; then
              echo "MongoDB container deployed successfully!"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "Failed to deploy MongoDB container after $max_attempts attempts"
              exit 1
            fi
            
            echo "Deployment failed. Waiting 10 seconds before retry..."
            sleep 10
            attempt=$((attempt + 1))
          done

          # Get container IP
          MONGO_IP=$(az container show \
            --resource-group $PR_RG \
            --name mongodb \
            --query ipAddress.ip \
            --output tsv)

          # Wait for MongoDB to start
          echo "Waiting for MongoDB to start..."
          sleep 30

          # Set DB_URI environment variable
          echo "DB_URI=mongodb://$MONGO_IP:27017/biteswipe" >> $GITHUB_ENV

          # Initialize test database
          echo "Initializing test database..."
          mongosh "mongodb://$MONGO_IP:27017/biteswipe_test" --eval '
            db.createCollection("startup");
            db.createCollection("users");
            db.createCollection("restaurants");
            db.createCollection("matches");
          '

          # Verify database is ready
          echo "Verifying database connection:"
          mongosh "mongodb://$MONGO_IP:27017/biteswipe_test" --eval 'db.stats()'

      # Setup test environment
      - name: Setup test environment
        run: |
          cd backend
          # Create .env file for tests
          echo "PORT=3000" > .env
          echo "DB_URI=mongodb://$MONGO_IP:27017/biteswipe_test" >> .env
          echo "NODE_ENV=test" >> .env
          echo "TEST_TYPE=unmocked" >> .env
          echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> .env
          echo "FIREBASE_CREDENTIALS_JSON_PATHNAME=./backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json" >> .env

      - name: Download Firebase Credentials
        working-directory: ${{ github.workspace }}
        run: |
          # Create directory if it doesn't exist
          mkdir -p backend

          # Try to download using Azure CLI with key authentication
          if az storage blob download \
            --account-name productionstorageaccoun2 \
            --container-name production-container \
            --name biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json \
            --file backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json \
            --auth-mode key 2>/dev/null; then
            # Verify the file exists and is not empty
            if [ -s backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json ]; then
              echo "Download successful and file is valid!"
              chmod 600 backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json
            else
              echo "Downloaded file is empty or invalid"
              rm -f backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json
              exit 1
            fi
          else
            echo "Failed to download Firebase credentials"
            exit 1
          fi

      - name: Run unmocked tests
        run: |
          cd backend
          echo "Running unmocked tests..."
          npm run test:coverage:unmocked -- --coverageReporters="json-summary" "text" --no-cache --forceExit --maxWorkers=2
          
          # Save test results for reporting
          mkdir -p test-results
          cp coverage/coverage-summary.json test-results/
          
          # Display test summary in readable format
          echo "\n===== Test Coverage Summary ====="
          echo "Statement coverage: $(cat coverage/coverage-summary.json | jq -r '.total.statements.pct')%"
          echo "Branch coverage:    $(cat coverage/coverage-summary.json | jq -r '.total.branches.pct')%"
          echo "Function coverage:  $(cat coverage/coverage-summary.json | jq -r '.total.functions.pct')%"
          echo "Line coverage:      $(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')%"
          
          echo "\n===== Files with Less Than 80% Coverage ====="
          jq -r 'to_entries | .[] | select(.key != "total") | select(.value.lines.pct < 80) | "\(.key):\n  Lines: \(.value.lines.pct)%\n  Statements: \(.value.statements.pct)%\n  Functions: \(.value.functions.pct)%\n  Branches: \(.value.branches.pct)%"' coverage/coverage-summary.json

      - name: Restore original setup file
        if: always()
        run: |
          cd backend
          mv src/__tests__/unmocked/unmocked_setup.ts.bak src/__tests__/unmocked/unmocked_setup.ts

      - name: Cleanup Azure Resources
        if: always()
        run: |
          # Delete the resource group and all resources
          echo "Cleaning up Azure resources..."
          PR_RG="pr${{ github.event.pull_request.number }}-mongodb-rg"
          az group delete --name $PR_RG --yes --no-wait


