name: Unmocked Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions block
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  NODE_VERSION: '18.x'
  RESOURCE_GROUP: CPEN321RSRCGROUP-biteswipe-resources
  PR_NUMBER: ${{ github.event.pull_request.number || 'main' }}

jobs:
  setup-mongodb:
    runs-on: ubuntu-latest
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Verify Azure Connection
      run: |
        echo "Verifying Azure connection..."
        if ! az account show &> /dev/null; then
          echo "::error::Azure login failed - could not verify account"
          exit 1
        fi
        echo "Azure connection verified successfully"
        az account show --query name -o tsv

    - name: Deploy MongoDB to Azure Container Apps
      run: |
        # Check Azure CLI version
        az --version
        
        # First, check if the environment exists
        ENV_NAME="biteswipe-env"
        if ! az containerapp env show --resource-group ${{ env.RESOURCE_GROUP }} --name "$ENV_NAME" &> /dev/null; then
          echo "Creating Container App environment $ENV_NAME..."
          az containerapp env create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name "$ENV_NAME" \
            --location eastus
        else
          echo "Container App environment $ENV_NAME already exists"
        fi
        
        # Now create the container app with the environment
        echo "Creating MongoDB container app..."
        az containerapp create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name biteswipe-mongodb-test-pr${{ env.PR_NUMBER }} \
          --environment "$ENV_NAME" \
          --image mongo:latest \
          --env-vars MONGO_INITDB_ROOT_USERNAME=test MONGO_INITDB_ROOT_PASSWORD=test \
          --target-port 27017 \
          --ingress external \
          --query properties.configuration.ingress.fqdn
      # Azure login is already done at the beginning of the job

    - name: Wait for MongoDB to be ready
      run: |
        # Get the FQDN from the container app
        MONGO_FQDN=$(az containerapp show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name biteswipe-mongodb-test-pr${{ env.PR_NUMBER }} \
          --query properties.configuration.ingress.fqdn -o tsv)
          
        echo "MongoDB FQDN: $MONGO_FQDN"
        
        # Wait for MongoDB to be ready
        max_attempts=10
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts to connect to MongoDB..."
          
          # Try to ping the MongoDB server
          if curl -s "http://$MONGO_FQDN:27017/" > /dev/null; then
            echo "MongoDB is ready!"
            echo "Setting MongoDB connection string for later steps"
            echo "MONGODB_URI=mongodb://test:test@$MONGO_FQDN:27017" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "MongoDB not ready yet. Waiting 15 seconds..."
          sleep 15
          attempt=$((attempt + 1))
        done
        
        echo "MongoDB failed to become ready after $max_attempts attempts"
        echo "Container app status:"
        az containerapp show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name biteswipe-mongodb-test-pr${{ env.PR_NUMBER }} \
          --query properties.latestRevisionStatus
        exit 1

  test:
    needs: setup-mongodb
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        echo "Installing dependencies..."
        npm ci
        if [ $? -ne 0 ]; then
          echo "npm ci failed"
          exit 1
        fi

    - name: Download Firebase Credentials
      working-directory: ./backend
      run: |
        # Function to download with retries
        download_with_retry() {
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts to download Firebase credentials..."
            
            # Try to download using Azure CLI with current authentication
            if az storage blob download \
              --account-name productionstorageaccoun2 \
              --container-name secrets \
              --name biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json \
              --file biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json; then
              # Verify the file exists and is not empty
              if [ -s biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json ]; then
                echo "Download successful and file is valid! Size: $(wc -c < biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json) bytes"
                return 0
              else
                echo "Download succeeded but file is empty or missing!"
                rm -f biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json
                return 1
              fi
            fi
            
            echo "Download failed. Waiting 5 seconds before retry..."
            echo "Detailed error output:"
            az storage blob download \
              --account-name productionstorageaccoun2 \
              --container-name secrets \
              --name biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json \
              --file biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json 2>&1
            
            sleep 5
            attempt=$((attempt + 1))
          done
          echo "Failed to download after $max_attempts attempts"
          return 1
        }

        # Try to download with retries
        if download_with_retry; then
          # Set proper permissions
          chmod 600 biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json
          echo "Firebase credentials downloaded and secured successfully"
          
          # Verify the file content type
          echo "Verifying file content type..."
          if file biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json | grep -q "JSON"; then
            echo "File verified as JSON"
          else
            echo "Warning: File may not be valid JSON"
            cat biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json | head -10
          fi
        else
          echo "Failed to download Firebase credentials after all retries"
          exit 1
        fi

    - name: Create .env file
      working-directory: ./backend
      run: |
        echo "Creating .env file with proper configuration..."
        echo "PORT=3000" > .env
        echo "DB_URI=${{ env.MONGODB_URI }}" >> .env
        echo "NODE_ENV=test" >> .env
        echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> .env
        echo "FIREBASE_CREDENTIALS_JSON_PATHNAME=./biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json" >> .env
        
        echo "Contents of .env file (redacted):"
        cat .env | sed 's/=.*/=REDACTED/g'
      
    - name: Run unmocked tests
      working-directory: ./backend
      run: |
        echo "Validating MongoDB connection..."
        cat > validate-connection.js << 'EOL'
        const mongoose = require("mongoose");
        const uri = process.env.DB_URI;
        
        console.log(`Attempting to connect to MongoDB at: ${uri.replace(/\/\/[^:]+:[^@]+@/, "//***:***@")}`);
        
        // Add connection options for better reliability
        mongoose.connect(uri, {
          serverSelectionTimeoutMS: 15000,
          socketTimeoutMS: 45000,
          connectTimeoutMS: 15000,
          retryWrites: true,
          retryReads: true
        })
        .then(() => {
          console.log("MongoDB connection successful!");
          return mongoose.connection.db.admin().ping();
        })
        .then(() => {
          console.log("MongoDB ping successful!");
          process.exit(0);
        })
        .catch(err => {
          console.error("MongoDB connection failed:", err);
          process.exit(1);
        });
        EOL
        
        node validate-connection.js
        
        echo "Running unmocked tests..."
        # Add retries for test execution
        max_attempts=3
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          echo "Test attempt $attempt of $max_attempts"
          if npm run test:coverage:unmocked; then
            echo "Tests completed successfully!"
            exit 0
          fi
          echo "Tests failed. Waiting before retry..."
          sleep 5
          attempt=$((attempt + 1))
        done
        
        echo "Tests failed after $max_attempts attempts"
        exit 1

  cleanup:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Delete MongoDB Container App
      run: |
        az containerapp delete \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name biteswipe-mongodb-test-pr${{ env.PR_NUMBER }} \
          --yes
      # Azure login is already done at the beginning of the job 