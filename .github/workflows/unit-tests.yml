name: Unit Tests

on:
  pull_request:
    branches:
      - main

# Define permissions needed for GitHub API operations
permissions:
  contents: read
  pull-requests: write

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # Install dependencies
      - name: Install dependencies
        run: cd backend && npm install

      # Download Firebase credentials
      - name: Download Firebase Credentials
        working-directory: ${{ github.workspace }}
        run: |
          # Download Firebase credentials from Azure Storage
          STORAGE_KEY=$(az storage account keys list \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --query '[0].value' -o tsv)
          
          # Download Firebase credentials from Azure Storage
          az storage blob download \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --account-key "$STORAGE_KEY" \
            --container-name secrets \
            --name biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json \
            --file backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json
          
          # Set proper permissions
          chmod 600 backend/biteswipe-132f1-firebase-adminsdk-fbsvc-76c5bb6fe5.json

      # Run unit tests and generate coverage
      - name: Run unit tests with coverage
        id: test_coverage
        run: |
          cd backend && npm run test:coverage:unittest -- --coverageReporters="json-summary" "text" --no-cache
        env:
          CI: true

      # Display coverage summary in logs
      - name: Display coverage summary
        working-directory: ./backend
        run: |
          # Display coverage summary in the logs
          node -e "
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            
            // Create summary table header
            let summaryTable = '| Metric | Coverage | Covered/Total |\\n|--------|----------|---------------|';
            
            // Add rows for each metric in a specific order to ensure consistent output
            const metrics = ['lines', 'statements', 'functions', 'branches', 'branchesTrue'];
            for (const key of metrics) {
              if (summary.total[key]) {
                const value = summary.total[key];
                summaryTable += '\\n| ' + key + ' | ' + value.pct + '% | ' + value.covered + '/' + value.total + ' |';
              }
            }
            
            // Print the table to the GitHub Actions log
            console.log('\\n\\n--- Coverage Summary ---');
            console.log(summaryTable.replace(/\\\\n/g, '\\n'));
            console.log('------------------------\\n');
          "

      # Comment on PR if tests pass
      - name: Comment on PR if tests pass
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            if (pr) {
              const runId = context.runId;
              const workflowUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
              
              const comment = "✅ **Tests passed!** [View coverage report in workflow logs](" + workflowUrl + ")";
              
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: pr.number,
                body: comment
              });
            }

      # Comment on PR if tests fail
      - name: Comment on PR if tests fail
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            if (pr) {
              const runId = context.runId;
              const workflowUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
              
              const comment = "❌ **Tests failed!** [View error details in workflow logs](" + workflowUrl + ")";
              
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: pr.number,
                body: comment
              });
            }

      # Fail if tests fail
      - name: Fail if tests fail
        if: failure()
        run: exit 1
